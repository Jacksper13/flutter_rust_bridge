// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2119384465;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__minimal__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::minimal::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__minimal__minimal_adder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "minimal_adder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <i32>::sse_decode(&mut deserializer);
            let api_b = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::minimal::minimal_adder(api_a, api_b))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal::One(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal { a: var_a };
    }
}

impl SseDecode
    for crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal {
            a: var_a,
        };
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__minimal__init_app_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__minimal__minimal_adder_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal::One(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal>
    for crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal
{
    fn into_into_dart(self) -> crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal>
    for crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal
{
    fn into_into_dart(self) -> crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal,
    > for crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
{
    fn into_into_dart(
        self,
    ) -> crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal {
        self
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal::One(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal>
        for wire_cst_my_enum_without_fn_with_unignore_twin_normal
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.One };
                    crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal::One(
                        ans.field0.cst_decode(),
                    )
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal>
        for wire_cst_my_struct_without_fn_with_unignore_twin_normal
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
            crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
                a: self.a.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal>
        for wire_cst_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
        {
            crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal {
                a: self.a.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_my_enum_without_fn_with_unignore_twin_normal {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: MyEnumWithoutFnWithUnignoreTwinNormalKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_my_enum_without_fn_with_unignore_twin_normal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_my_struct_without_fn_with_unignore_twin_normal {
        fn new_with_null_ptr() -> Self {
            Self {
                a: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_my_struct_without_fn_with_unignore_twin_normal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr
        for wire_cst_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal
    {
        fn new_with_null_ptr() -> Self {
            Self {
                a: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    // Section: dart2rust

    impl CstDecode<crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal {
            let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => crate::api::minimal::MyEnumWithoutFnWithUnignoreTwinNormal::One(
                    self_.get(1).cst_decode(),
                ),
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::api::minimal::MyStructWithoutFnWithUnignoreTwinNormal {
                a: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
        {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::api::minimal::MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal {
                a: self_.get(0).cst_decode(),
            }
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
